# -*- coding: utf-8 -*-
"""TTS_GA FIX FIX.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OF2S_pM_Dt-Musn3l0nv_44O2Vn4Mmb4
"""

#KASUS 1 ALGORITMA GENETIK DENGAN POPULASI 20
#kalo Algoritma Genetik itu flipbit, biasanya stochastik, jadi kita tidak bisa kendalikan derajat polinomialnya atau random
import random 

# representasi induk
N = 20  # jumlah populasi
rows, cols = (N, 8)  
induk = [[0 for i in range(cols)] for j in range(rows)]
print('Induk: ', induk)

# representasi anak 
# karena ada 20 induk, brti pasti ada 40 anak
N_Anak = 40
rows, cols = (N_Anak, 8) 
anak = [[0 for i in range(cols)] for j in range(rows)]
print('Anak: ', anak)

def hitungInt(ind = []):
    x = ind[7] * 1 
    x = x + ind[6] * 2 
    x = x + ind[5] * 4
    x = x + ind[4] * 8
    x = x + ind[3] * 16
    x = x + ind[2] * 32
    x = x + ind[1] * 64
    x = x + ind[0] * 128
    return x

def hitungFitness(ind = []):
    x = hitungInt(ind)
    y = 15*x - x**2     
    return y

def crossOver(ind1 = [], ind2 = []):
    anak1 = [0, 0, 0, 0, 0, 0, 0, 0]
    anak2 = [0, 0, 0, 0, 0, 0, 0, 0]
    
    anak1[0] = ind1[0]
    anak1[1] = ind1[1]
    anak1[2] = ind1[2]
    anak1[3] = ind1[3]
    anak1[4] = ind2[4]
    anak1[5] = ind2[5]
    anak1[6] = ind2[6]
    anak1[7] = ind2[7]
    
    anak2[0] = ind2[0]
    anak2[1] = ind2[1]
    anak2[2] = ind2[2]
    anak2[3] = ind2[3]
    anak2[4] = ind1[4]
    anak2[5] = ind1[5]
    anak2[6] = ind1[6]
    anak2[7] = ind1[7]
    return anak1, anak2

def mutasi(ind = []):
    a = random.randint(0, 7)
    ind[a] = 1 - ind[a]
    return ind

# pecahlah permasalah besar itu menjadi permasalahan kecil - kecil
# langkah langkah GA : 

# 1. Inisialisasi
Pc = 0.7 #Nilai CrossOver
Pm = 0.01  #Nilai Permutasi

for i in range(N):
    # mengambil nilai induk, kita pake random 
    a = random.randint(0, 100)  # karena inputnya 0 - 100 x nya, jadi induknya ya 0 - 100
    # mapping bilangan integer ini ke dalam bentuk binary 
    induk[i] = [int (x) for x in '{:08b}'.format(a)]
    print(a, ':', induk[i])  # jadi ini kenapa kok kalo ngerandom ada yang sama?  

# menentukan berapa kali iterasi
i = 1
epochs = 50  # berapa kali training
MaxFitness = [0 for i in range(epochs)]
for j in range(N):
    if (hitungFitness(induk[j]) > MaxFitness[0]):
        MaxFitness[0] = hitungFitness(induk[j])
print(MaxFitness[0])

while i < epochs:
    
# 2. Rerpdouksi (Melakukan Crossover dan Permutasi)
    # apakah dia akan melakukan crossover atau tidak, maka perlu probabilitas
    a = random.random()  # random float antara 0 - 1, apabila nilainya ada diantara 0.01 - 0.7, maka dia akan di crossover, kalau dibawa itu dia akan bemrutasi
    if (a < Pc):
        # lakukan cross over 
        # setiap kali crossover, dua induk akan menghasilkan dua anak, ingat yang dipisah pisah itu
        # karena tidak ada seleksi, maka yang dikirimkan untuk crossover adalah induk hasil seleksi 
        anak[0], anak[1] = crossOver(induk[0], induk[1])
        anak[2], anak[3] = crossOver(induk[0], induk[2])
        anak[4], anak[5] = crossOver(induk[1], induk[2])
        anak[6], anak[7] = crossOver(induk[3], induk[4])
        anak[8], anak[9] = crossOver(induk[3], induk[5])
        anak[10], anak[11] = crossOver(induk[4], induk[5])
        anak[12], anak[13] = crossOver(induk[6], induk[7])
        anak[14], anak[15] = crossOver(induk[6], induk[8])
        anak[16], anak[17] = crossOver(induk[7], induk[8])
        anak[18], anak[19] = crossOver(induk[9], induk[10])
        anak[20], anak[21] = crossOver(induk[9], induk[11])
        anak[22], anak[23] = crossOver(induk[10], induk[11])
        anak[24], anak[25] = crossOver(induk[12], induk[13])
        anak[26], anak[27] = crossOver(induk[12], induk[14])
        anak[28], anak[29] = crossOver(induk[13], induk[14])
        anak[30], anak[31] = crossOver(induk[15], induk[16])
        anak[32], anak[33] = crossOver(induk[15], induk[17])
        anak[34], anak[35] = crossOver(induk[16], induk[17])
        anak[36], anak[37] = crossOver(induk[18], induk[19])
        anak[38], anak[39] = crossOver(induk[18], induk[0])
        
    if (a < Pm):
        # melakukan mutasi 
        for x in range(0, 19):
            induk[x] = mutasi(induk[x]) #Melakukan perulangan untuk mutasi dimulai dari induk(indeks) ke-0
        
    
# 3. Elitism (Mengganti Nilai Induk Dengan Anak)
    # generational replacement -> jadi semua anak akan menggantikan induk, dan anak nanti akan dibikin induk untuk populasi berikutnya
    # steady-state replacement -> hanya mengganti induk terburuk dengan anak terbaik
    # kita menggunakan steady state replacement
    # mencari induk dengan fitness terburuk
    minFit = 10000  # memberi nilai awal untuk mencari minimum fitness dari induk
    idx = 0
    for j in range(N):
        if (hitungFitness(induk[j]) < minFit):
            minFit = hitungFitness(induk[j])  
            idx = j
    maxFit = 0  # maximum fitness dari anak 
    idxAnak = 0
    for j in range(N_Anak):
        if (hitungFitness(anak[j]) > maxFit):
            maxFit = hitungFitness(anak[j])
            idxAnak = j
    # replacement steady state
    induk[idx] = anak[idxAnak]
    # MaxFitness[i] = nilai max dari induk
    for j in range(N):
        if (hitungFitness(induk[j]) > MaxFitness[i]):
            MaxFitness[i] = hitungFitness(induk[j])
            
    i += 1

# 4. Output
# MaxFitness adalah outputnya (Merupakan Hasil Optimal yang paling maksimal)
import matplotlib.pyplot as plt
x = [i for i in range(epochs)]
plt.plot(x, MaxFitness)
plt.show()

NilaiMaksimum = MaxFitness[49]
print('MaxFitness = ', NilaiMaksimum)

#KASUS 2 ALGORITMA GENETIK DENGAN POPULASI 100
#Algoritma Genetik itu flipbit, biasanya stochastik, jadi kita tidak bisa kendalikan derajat polinomialnya atau random
import random 

# representasi induk
N = 100  # jumlah populasi

rows, cols = (N, 8)  
induk = [[0 for i in range(cols)] for j in range(rows)]
print('Induk: ', induk)

# representasi anak 
# karena ada 100 induk, brti pasti ada 200 anak
N_Anak = 200
rows, cols = (N_Anak, 8) 
anak = [[0 for i in range(cols)] for j in range(rows)]
print('Anak: ', anak)

def hitungInt(ind = []):
    x = ind[7] * 1 
    x = x + ind[6] * 2 
    x = x + ind[5] * 4
    x = x + ind[4] * 8
    x = x + ind[3] * 16
    x = x + ind[2] * 32
    x = x + ind[1] * 64
    x = x + ind[0] * 128
    return x

def hitungFitness(ind = []):
    x = hitungInt(ind)
    y = 15*x - x**2     
    return y

def crossOver(ind1 = [], ind2 = []):
    anak1 = [0, 0, 0, 0, 0, 0, 0, 0]
    anak2 = [0, 0, 0, 0, 0, 0, 0, 0]
    
    anak1[0] = ind1[0]
    anak1[1] = ind1[1]
    anak1[2] = ind1[2]
    anak1[3] = ind1[3]
    anak1[4] = ind2[4]
    anak1[5] = ind2[5]
    anak1[6] = ind2[6]
    anak1[7] = ind2[7]
    
    anak2[0] = ind2[0]
    anak2[1] = ind2[1]
    anak2[2] = ind2[2]
    anak2[3] = ind2[3]
    anak2[4] = ind1[4]
    anak2[5] = ind1[5]
    anak2[6] = ind1[6]
    anak2[7] = ind1[7]
    return anak1, anak2

def mutasi(ind = []):
    a = random.randint(0, 7)
    ind[a] = 1 - ind[a]
    return ind

# pecahlah permasalah besar itu menjadi permasalahan kecil - kecil
# langkah langkah GA : 

# 1. Inisialisasi
Pc = 0.7 #Nilai Crossover
Pm = 0.01  #Nilai Permutasi

for i in range(N):
    # mengambil nilai induk, kita pake random 
    a = random.randint(0, 100)  # karena inputnya 0 - 100 x nya, jadi induknya ya 0 - 100
    # mapping bilangan integer ini ke dalam bentuk binary 
    induk[i] = [int (x) for x in '{:08b}'.format(a)]
    print(a, ':', induk[i]) 

# menentukan berapa kali iterasi
i = 1
epochs = 50  # berapa kali training
MaxFitness = [0 for i in range(epochs)]
for j in range(N):
    if (hitungFitness(induk[j]) > MaxFitness[0]):
        MaxFitness[0] = hitungFitness(induk[j])
print(MaxFitness[0])

while i < epochs:
    
#2. Reproduksi (Melakukan Crossover dan Permutasi)
    # apakah dia akan melakukan crossover atau tidak, maka perlu probabilitas
    a = random.random()  # random float antara 0 - 1, apabila nilainya ada diantara 0.01 - 0.7, maka dia akan di crossover, kalau dibawa itu dia akan bemrutasi
    if (a < Pc):
        # lakukan cross over 
        # setiap kali crossover, dua induk akan menghasilkan dua anak, ingat yang dipisah pisah itu
        # karena tidak ada seleksi, maka yang dikirimkan untuk crossover adalah induk hasil seleksi 
        anak[0], anak[1] = crossOver(induk[0], induk[1])
        anak[2], anak[3] = crossOver(induk[0], induk[2])
        anak[4], anak[5] = crossOver(induk[1], induk[2])
        anak[6], anak[7] = crossOver(induk[3], induk[4])
        anak[8], anak[9] = crossOver(induk[3], induk[5])
        anak[10], anak[11] = crossOver(induk[4], induk[5])
        anak[12], anak[13] = crossOver(induk[6], induk[7])
        anak[14], anak[15] = crossOver(induk[6], induk[8])
        anak[16], anak[17] = crossOver(induk[7], induk[8])
        anak[18], anak[19] = crossOver(induk[9], induk[10])
        anak[20], anak[21] = crossOver(induk[9], induk[11])
        anak[22], anak[23] = crossOver(induk[10], induk[11])
        anak[24], anak[25] = crossOver(induk[12], induk[13])
        anak[26], anak[27] = crossOver(induk[12], induk[14])
        anak[28], anak[29] = crossOver(induk[13], induk[14])
        anak[30], anak[31] = crossOver(induk[15], induk[16])
        anak[32], anak[33] = crossOver(induk[15], induk[17])
        anak[34], anak[35] = crossOver(induk[16], induk[17])
        anak[36], anak[37] = crossOver(induk[18], induk[19])
        anak[38], anak[39] = crossOver(induk[18], induk[20])
        anak[40], anak[41] = crossOver(induk[19], induk[20])
        anak[42], anak[43] = crossOver(induk[21], induk[22])
        anak[44], anak[45] = crossOver(induk[21], induk[23])
        anak[46], anak[47] = crossOver(induk[22], induk[23])
        anak[48], anak[49] = crossOver(induk[24], induk[25])
        anak[50], anak[51] = crossOver(induk[24], induk[26])
        anak[52], anak[53] = crossOver(induk[25], induk[26])
        anak[54], anak[55] = crossOver(induk[27], induk[28])
        anak[56], anak[57] = crossOver(induk[27], induk[29])
        anak[58], anak[59] = crossOver(induk[28], induk[29])
        anak[60], anak[61] = crossOver(induk[30], induk[31])
        anak[62], anak[63] = crossOver(induk[30], induk[32])
        anak[64], anak[65] = crossOver(induk[31], induk[32])
        anak[66], anak[67] = crossOver(induk[33], induk[34])
        anak[68], anak[69] = crossOver(induk[33], induk[35])
        anak[70], anak[71] = crossOver(induk[34], induk[35])
        anak[72], anak[73] = crossOver(induk[36], induk[37])
        anak[74], anak[75] = crossOver(induk[36], induk[38])
        anak[76], anak[77] = crossOver(induk[37], induk[38])
        anak[78], anak[79] = crossOver(induk[39], induk[40])
        anak[80], anak[81] = crossOver(induk[39], induk[41])
        anak[82], anak[83] = crossOver(induk[40], induk[41])
        anak[84], anak[85] = crossOver(induk[42], induk[43])
        anak[86], anak[87] = crossOver(induk[42], induk[44])
        anak[88], anak[89] = crossOver(induk[43], induk[44])
        anak[90], anak[91] = crossOver(induk[45], induk[46])
        anak[92], anak[93] = crossOver(induk[45], induk[47])
        anak[94], anak[95] = crossOver(induk[46], induk[47])
        anak[96], anak[97] = crossOver(induk[48], induk[49])
        anak[98], anak[99] = crossOver(induk[48], induk[50])
        anak[100], anak[101] = crossOver(induk[49], induk[50])
        anak[102], anak[103] = crossOver(induk[51], induk[52])
        anak[104], anak[105] = crossOver(induk[51], induk[53])
        anak[106], anak[107] = crossOver(induk[52], induk[53])
        anak[108], anak[109] = crossOver(induk[54], induk[55])
        anak[110], anak[111] = crossOver(induk[54], induk[56])
        anak[112], anak[113] = crossOver(induk[55], induk[56])
        anak[114], anak[115] = crossOver(induk[57], induk[58])
        anak[116], anak[117] = crossOver(induk[57], induk[59])
        anak[118], anak[119] = crossOver(induk[58], induk[59])
        anak[120], anak[121] = crossOver(induk[60], induk[61])
        anak[122], anak[123] = crossOver(induk[60], induk[62])
        anak[124], anak[125] = crossOver(induk[61], induk[62])
        anak[126], anak[127] = crossOver(induk[63], induk[64])
        anak[128], anak[129] = crossOver(induk[63], induk[65])
        anak[130], anak[131] = crossOver(induk[64], induk[65])
        anak[132], anak[133] = crossOver(induk[66], induk[67])
        anak[134], anak[135] = crossOver(induk[66], induk[68])
        anak[136], anak[137] = crossOver(induk[67], induk[68])
        anak[138], anak[139] = crossOver(induk[69], induk[70])
        anak[140], anak[141] = crossOver(induk[69], induk[71])
        anak[142], anak[143] = crossOver(induk[70], induk[71])
        anak[144], anak[145] = crossOver(induk[72], induk[73])
        anak[146], anak[147] = crossOver(induk[72], induk[74])
        anak[148], anak[149] = crossOver(induk[73], induk[74])
        anak[150], anak[151] = crossOver(induk[75], induk[76])
        anak[152], anak[153] = crossOver(induk[75], induk[77])
        anak[154], anak[155] = crossOver(induk[76], induk[77])
        anak[156], anak[157] = crossOver(induk[78], induk[79])
        anak[158], anak[159] = crossOver(induk[78], induk[80])
        anak[160], anak[161] = crossOver(induk[79], induk[80])
        anak[162], anak[163] = crossOver(induk[81], induk[82])
        anak[164], anak[165] = crossOver(induk[81], induk[83])
        anak[166], anak[167] = crossOver(induk[82], induk[83])
        anak[168], anak[169] = crossOver(induk[84], induk[85])
        anak[170], anak[171] = crossOver(induk[84], induk[86])
        anak[172], anak[173] = crossOver(induk[85], induk[86])
        anak[174], anak[175] = crossOver(induk[87], induk[88])
        anak[176], anak[177] = crossOver(induk[87], induk[89])
        anak[178], anak[179] = crossOver(induk[88], induk[89])
        anak[180], anak[181] = crossOver(induk[90], induk[91])
        anak[182], anak[183] = crossOver(induk[90], induk[92])
        anak[184], anak[185] = crossOver(induk[91], induk[92])
        anak[186], anak[187] = crossOver(induk[93], induk[94])
        anak[188], anak[189] = crossOver(induk[93], induk[95])
        anak[190], anak[191] = crossOver(induk[94], induk[95])
        anak[192], anak[193] = crossOver(induk[96], induk[97])
        anak[194], anak[195] = crossOver(induk[96], induk[98])
        anak[196], anak[197] = crossOver(induk[97], induk[99])
        anak[198], anak[199] = crossOver(induk[99], induk[0])
        
    if (a < Pm):
        # melakukan mutasi 
        for x in range(0, 99):
            induk[x] = mutasi(induk[x])#Melakukan perulangan untuk mutasi dimulai dari induk(indeks) ke-0 

            
# 3. Elitisim (Mengganti Nilai Induk Dengan Anak)
    # generational replacement -> jadi semua anak akan menggantikan induk, dan anak nanti akan dibikin induk untuk populasi berikutnya
    # steady-state replacement -> hanya mengganti induk terburuk dengan anak terbaik
    # kita menggunakan steady state replacement
    # mencari induk dengan fitness terburuk
    minFit = 10000  # memberi nilai awal untuk mencari minimum fitness dari induk
    idx = 0
    for j in range(N):
        if (hitungFitness(induk[j]) < minFit):
            minFit = hitungFitness(induk[j])  
            idx = j
    maxFit = 0  # maximum fitness dari anak 
    idxAnak = 0
    for j in range(N_Anak):
        if (hitungFitness(anak[j]) > maxFit):
            maxFit = hitungFitness(anak[j])
            idxAnak = j
    # replacement steady state
    induk[idx] = anak[idxAnak]
    # MaxFitness[i] = nilai max dari induk
    for j in range(N):
        if (hitungFitness(induk[j]) > MaxFitness[i]):
            MaxFitness[i] = hitungFitness(induk[j])
            
    i += 1

# 4. Output
# MaxFitness adalah outputnya (Merupakan hasi optimal yang paling maksimal)
import matplotlib.pyplot as plt
x = [i for i in range(epochs)]
plt.plot(x, MaxFitness)
plt.show()

NilaiMaksimum = MaxFitness[49]
print('Nilai Max = ', NilaiMaksimum)